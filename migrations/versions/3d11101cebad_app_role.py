"""app_role

Revision ID: 3d11101cebad
Revises: 18145559121e
Create Date: 2022-04-20 21:11:14.192326

"""
import os

from alembic import op


# revision identifiers, used by Alembic.
revision = "3d11101cebad"
down_revision = "18145559121e"
branch_labels = None
depends_on = None


ROLE_NAME = "app"


def upgrade():
    """
    Creates an app role.
    Optionally, assigns the app role to `app_user` passed as env variable.
    """
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    # don't create the role for test db
    if "test" in conn.engine.url.database:
        return

    op.execute(f"CREATE ROLE {ROLE_NAME};")
    op.execute(
        f"""
        DO
        $$
        BEGIN
            execute format('GRANT CONNECT ON DATABASE %I TO {ROLE_NAME}', current_database());
        END;
        $$;
        """
    )

    op.execute(
        f"""
        GRANT USAGE ON SCHEMA public TO {ROLE_NAME};
        GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO {ROLE_NAME};
        -- reduce permissions for _version tables
        REVOKE ALL ON guests_version FROM {ROLE_NAME};
        REVOKE ALL ON accommodation_units_version FROM {ROLE_NAME};
        REVOKE ALL ON transaction FROM {ROLE_NAME};
        GRANT SELECT ON TABLE guests_version TO {ROLE_NAME};
        GRANT SELECT ON TABLE accommodation_units_version TO {ROLE_NAME};
        GRANT SELECT ON TABLE transaction TO {ROLE_NAME};
        GRANT INSERT ON TABLE guests_version TO {ROLE_NAME};
        GRANT INSERT ON TABLE accommodation_units_version TO {ROLE_NAME};
        GRANT INSERT ON TABLE transaction TO {ROLE_NAME};
        GRANT EXECUTE ON FUNCTION update_claimed_at() TO {ROLE_NAME};
        -- default roles assigned to new objects in future
        ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL PRIVILEGES ON TABLES TO {ROLE_NAME};
        """
    )

    app_user = os.getenv("app_user", None)
    if app_user:
        op.execute(f"GRANT {ROLE_NAME} TO {app_user};")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    if "test" in conn.engine.url.database:
        return

    op.execute(f"DROP OWNED BY {ROLE_NAME};")
    op.execute(f"DROP ROLE {ROLE_NAME};")
    # ### end Alembic commands ###
